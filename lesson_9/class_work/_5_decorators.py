"""
    Декораторы - это обертки над функциями.

    При вызове задекорированной функции она вызывается внутри декоратора.

    Для декорирования функции используется символ @
"""


def decorate(func):
    # функция-декоратор, принимает задекорированную функцию func

    def wrapper(*args, **kwargs):

        print("Это сообщение выводится до выполнения функции.")
        result = func(*args, **kwargs)  # вызывается задекорированная функция
        print("Это сообщение выводится после выполнения функции.")

        return result

    return wrapper


@decorate
def hello(name):
    print(f"Hello, {name.title()}!")


hello("max")
# Это сообщение выводится до выполнения функции.
# Hello, Max!
# Это сообщение выводится после выполнения функции.


@decorate
def summ(a, b):
    return a + b


a = summ(10, 20)

print(a)


# summ(24, 123)
# # Это сообщение выводится до выполнения функции.
# # Hello, Max!
# # Это сообщение выводится после выполнения функции.


# # Так же можно вызвать функцию, не декорируя ее,
# # т.е. декорирование с помощью @ - это синтаксический сахар, для удобства


# def usd_to_uah(currency, rate=28):
#     print(currency * rate)


# decorate(usd_to_uah)(10)
# # Это сообщение выводится до выполнения функции.
# # 280
# # Это сообщение выводится после выполнения функции.
